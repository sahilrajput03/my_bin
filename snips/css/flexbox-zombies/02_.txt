FLEX-GROW: 1;
* for auto sizing according to space.
* flex grow works in the exapnsion (in same axis as the flex-direction)

* If you want them to grow like 1st element: 2nd element, then define individual flex-grow in each of those elements as 1 and 2 in the other one..

*DEFAULT flex-grow's value is 0, i.e., items don't auto exapnd at all.

*flex-grow always has to be applied directly to the targets, not to the crossbow itself.

*If you want any element to not grow, set its flex-grow's value as 0.

//////////////
* flex-shrink works in the compression in the same axis as flex-direction.
flex-shrink: 1
* If you give flex-shrink (ITS ABOUT RATIOS ONLY) to all elements via a separate class to all the childs of the flex with flex-shrink as 1 or 2 or 3 or anything else, its just same, yikes!(coz its afterall rations that is asssigned to every element.)

*DEFAULT value of flex-shrink is 1.
*You can make a child to refuse to shrink via seting flex-shrink as 0.
//////////////
FLEX-BASIS (basically it overrides the width property, yikes!)
It is a new and improved version of css width property. e.g. usage: flex-basis: 300px;
*flex-basis is supposed to given to children of the flex, not the container itself.
Also, in below e.g., 
.goo{
    width: 500px;
    flex-basis: 100px;
    //here, flex-basis will win over width property.
}

* min-width acts as lower limit of flex-basis, yikes!(*NOTE : Only min-width is respected where a flex-basis has a lower value is already there.)
* max-width acts as upper limit of flex-basis, yikes!(*NOTE: Only max-width is respected whre a flex-basis has a greater value is already there.)
*flex-basis isn't just for width. When shooting vertically(i.e., flex-direction is column or column-reverse) it(flex-basis) deals with height instead of width. In other words flex-basis changes the size of things in the direction of our lazer direction, yo!
*flex-basis can used to set percentage(of the total size of the container) to set its length, for e.g., `flex-basis: 50%; `.
*flex-basis's DEFAULT value is auto, and that means to fallback to using width property, yo!!
*The final `flex-basis` can't be higher than its max-width(or max-height when shooting vertically). If it is higher, the final flex-basis just becomes that max-value.
*The final `flex-basis` can't be lower than its min-width(or min-height when shooting vertically). If it is lower, the final flex-basis just becomes that min value.
*As a trick you can use (flex-direction: column/column-reverse) `max-height` to restrict maximum growing of an element of the flex, yikes!!(Similarty with width if flex-direction is either row or row-reverse).
* flex-basis is a hypothetical size before any growing or shrinking begins.
/////////////////
ORDER, DEFAULT order's value is zero.
* The bigger the order, the farther it'll be in the lazer's direction.
* The elements in the flex are ordered according to the order, i.e., lower first, higher last.
/////////////////
FLEX-WRAP
DEFAULT property of flex-wrap is as `flex-wrap: nowrap`, yo!!
This property is given to the crossbow itself, yo!
When elements in the flex wrap into new line if space is not enough, we need 
flex-wrap:wrap
, yikes!!! Also, lines made with {flex-wrap: wrap} are always parallel to flex-direction.
* To make new line above current line, use `flex-wrap-wrap-reverse;`
*LEARN: When we use `wrap-reverse`, align-items:flex-start will make its first-line at  bottom(in case of flex-direction row/row-reverse). *Also align-items:flex-start will make its first-line at in top (in case of flex-direction as column/column-reverse), check if thats a little worng typed :( :LOL:
* flex-wrap: wrap-reverse makes the align-items: flex-end to go to the top instead of the bottom like it normally would, even when nothing was wrapping!. Pretty crazy!
*  {flex-wrap: wrap; justify-content: flex-end;} can act together to make the last child stick to the end of the flex, yo!!
*LEARN: The zombies(elements) treat the line they're on as the only space that matters. So they'll grow to fill up space on their line, and position themseleves only within the boundaries of their line.
*LEARN: {flex-wrap}@crossbow and {flex-basis: 50%}@all_element_of_croosbow makes great ui as in two elements perline, yikes!
*LEARN: {align-items: flex-end; flex-wrap: wrap-reverse;flex-direction: column-reverse}@crossbow makes the elements align in right most line and add more items in line in the left direction only, yikes!
*LEARN: {justify-content: center, flex-wrap: wrap}@crossbow makes items in each line center justified, yikes, simple behaviour, yo!
*LEARN: flex-grow is still helpful with flex-wrap: wrap.
//////////////
ALIGN-CONTENT (it defined the arrangement of line in a perpendicular direction of `flex-direction`)
DEFAULT value of align-content is `stretch`. This property works in the perperndicular direction of the flex-direction.

align-content: stretch
^^ this is DEFAULT property.

align-content: flex-start
^^ this will make `lines containing elements` to get attracted toward upwards.

align-contetn flex-end;
^^ this will make the `lines containing elements` to get attracted towar downwards.

align-content: center;
^^ this makes the `line` attracted towards the center, yikes!

align-content: space-around;
^^ this makes the `line` managed like space around as we learned ealier in other properties.

align-content: space-between;
^^ this makes the `line` managed like space is only between the elements, not in the outer edges of the lines.


*LEARN: When shooting vertically, using {align-content: flex-end;} will make lines attracted towards right side.
*LEARN: What did I learn about `align-content`: When there gets too many zombies to fit in a single line and they start wrapping to new lines, those lines can be arranged in several different ways perpendicular to the direction I'm shooting, along the crossbow's blue Alignment Laser.

**AMAZING: mozilla's documentation for css is just awesome!! Check it out @ https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Aligning_Items_in_a_Flex_Container
 as live updating is there with evey character changed, yikes!!
/////////////////////////
Shortcuts:
flex: 1 1 300px #This is applicable to a child in flex, yo!!
that means,`flex-grow, flex-shrink, flex-basis` in that order. *acronmy: grow-shrink-basis, gsb.
E.g., {flex: 1 0 auto;}, yikes!!

// ANOTHER SHORCUT:
LEARN: I can use flex to just specify flex-grow only if I want, and other property i.e., flex-shrink and flex-basis will be defined as shown below-
E.g., 
{flex:1}
will set 
{
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 0px; // Though this is different than flex-basis's default proeperty i.e., auto, yo!
}, yo!!

// ANOTHER SHORCUT:
{flex:auto} on element will set these properties..
{
    flex-grow: 1;
    flex-shrink:1;
    flex-basis: auto;
}

// ANOTHER SHORCUT:
{flex: none} on element will set these properties..
{
    flex-grow: 0
    flex-shrink: 0
    flex-basis: auto
}, So using flex: auto means that we say listen zombie, don't grow, don't shrink, and just use your width as your basis.

// ANOTHER SHORCUT:
flex-direction and flex-wrap
{flex-flow: column wrap;} on crossbow itself will set below properties..
{
    flex-direction: column;
    flex-wrap: wrap
}